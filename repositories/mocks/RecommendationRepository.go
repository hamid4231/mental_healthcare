// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	models "MentalHealthCare/models"

	mock "github.com/stretchr/testify/mock"
)

// RecommendationRepository is an autogenerated mock type for the RecommendationRepository type
type RecommendationRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: recReq
func (_m *RecommendationRepository) Create(recReq models.RecommendationRequest) (models.Recommendation, error) {
	ret := _m.Called(recReq)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Recommendation
	var r1 error
	if rf, ok := ret.Get(0).(func(models.RecommendationRequest) (models.Recommendation, error)); ok {
		return rf(recReq)
	}
	if rf, ok := ret.Get(0).(func(models.RecommendationRequest) models.Recommendation); ok {
		r0 = rf(recReq)
	} else {
		r0 = ret.Get(0).(models.Recommendation)
	}

	if rf, ok := ret.Get(1).(func(models.RecommendationRequest) error); ok {
		r1 = rf(recReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *RecommendationRepository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *RecommendationRepository) GetAll() ([]models.Recommendation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Recommendation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Recommendation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Recommendation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Recommendation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *RecommendationRepository) GetByID(id string) (models.Recommendation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.Recommendation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Recommendation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Recommendation); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Recommendation)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: recReq, id
func (_m *RecommendationRepository) Update(recReq models.RecommendationRequest, id string) (models.Recommendation, error) {
	ret := _m.Called(recReq, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 models.Recommendation
	var r1 error
	if rf, ok := ret.Get(0).(func(models.RecommendationRequest, string) (models.Recommendation, error)); ok {
		return rf(recReq, id)
	}
	if rf, ok := ret.Get(0).(func(models.RecommendationRequest, string) models.Recommendation); ok {
		r0 = rf(recReq, id)
	} else {
		r0 = ret.Get(0).(models.Recommendation)
	}

	if rf, ok := ret.Get(1).(func(models.RecommendationRequest, string) error); ok {
		r1 = rf(recReq, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecommendationRepository creates a new instance of RecommendationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRecommendationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecommendationRepository {
	mock := &RecommendationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
